linelist <- strsplit(line, "\\s+")[[1]]
n <- length(linelist)
# If the name field is so long that it forces a newline,
# then three rows of text should be combined into one.
# if (n < 6){
#   page[j:(j + 2)] %>%
#     paste(collapse = "") %>%
#     strsplit(split = "\\s+") -> linelist
#   linelist <- linelist[[1]]
#
# }
# Check if line contains student data by
# checking whether that flagged string is in
# any word in the list.
if (TRUE %in%  stri_detect_fixed(linelist, a0)) {
# Get name, presence, and date and save them to new_row
new_row <- c(get_name(linelist),
get_presence(linelist),
get_date(linelist))
# Add new_row to dataframe.
df[nrow(df)+1,] <- new_row
}
}
}
# Iterate over each page, over each line.
for (i in 1:length(raw_data)) {
page <- raw_data[[i]]
for (j in 1:length(page)) {
# line <- page[[j]]
line <- page[j]
# Strip each line into a list, and store its length.
linelist <- strsplit(line, "\\s+")[[1]]
n <- length(linelist)
# If the name field is so long that it forces a newline,
# then three rows of text should be combined into one.
# if (n < 6){
#   page[j:(j + 2)] %>%
#     paste(collapse = "") %>%
#     strsplit(split = "\\s+") -> linelist
#   linelist <- linelist[[1]]
#
# }
# Check if line contains student data by
# checking whether that flagged string is in
# any word in the list.
if (TRUE %in%  stri_detect_fixed(linelist, a0)) {
# Get name, presence, and date and save them to new_row
new_row <- c(get_name(linelist),
get_presence(linelist),
get_date(linelist))
# Add new_row to dataframe.
df[nrow(df)+1,] <- new_row
}
}
}
# Correct Student name capitalization.
df$Student <- str_to_title(df$Student)
# Set the date string as a Date object.
df$Date <- mdy(df$Date)
df$Date <- format(df$Date, format="%m-%d")
# Exclude holidays.
df %>% filter(Date != holiday) -> df
# Get number of class days.
class_days_n <- length(unique(df$Date))
# Correct Student name capitalization.
df$Student <- str_to_title(df$Student)
# Set the date string as a Date object.
df$Date <- mdy(df$Date)
df$Date <- format(df$Date, format="%m-%d")
# Exclude holidays.
df %>% filter(Date != holiday) -> df
# Get number of class days.
class_days_n <- length(unique(df$Date))
# Group data by date and get total number of enrolled students each day.
df %>% group_by(Date) %>%
count(name = "Total") -> date_df
# Group data by date and count all who were in class any time that day.
df %>% group_by(Date) %>%
filter(
Presence == "Present" |
Presence == "Late" |
Presence == "Left Early"
) %>%
count(name = "In_Class") -> date_p_df
# Aggregate counts for In_Class, Total (Enrolled), and Percent.
date_df %>% add_column(In_Class = date_p_df$In_Class)  %>%
mutate(Percent = round(In_Class / Total * 100)) %>%
select(Date, In_Class, Total, Percent) -> date_df
date_df
# Function to extract name from a linelist of strings
get_name <- function(a_line_list){
student_name <- paste(a_line_list[3:2], collapse = " ")
student_name <- str_remove(student_name, ",") # Strip out the comma
return(student_name)
}
# Function to extract presence status from a linelist of strings
get_presence <- function(a_line_list){
suppressWarnings({
if (TRUE %in%  stri_detect_fixed(a_line_list, "Left")) {
return("Left Early")
} else if (TRUE %in%  stri_detect_fixed(a_line_list, "Present")) {
return("Present")
} else if (TRUE %in%  stri_detect_fixed(a_line_list, "Absent")) {
return("Absent")
} else if (TRUE %in%  stri_detect_fixed(a_line_list, "Late")) {
return("Late")
}
})
# return(student_presence)
}
get_date <- function(a_line_list){
suppressWarnings({
for (it in 1:length(a_line_list)){
if (!is.na(mdy(a_line_list[it]))){
return(a_line_list[it])
} else {
result <- NA
}
}
})
return(result)
}
# Iterate over each page, over each line.
for (i in 1:length(raw_data)) {
page <- raw_data[[i]]
for (j in 1:length(page)) {
# line <- page[[j]]
line <- page[j]
# Strip each line into a list, and store its length.
linelist <- strsplit(line, "\\s+")[[1]]
n <- length(linelist)
# If the name field is so long that it forces a newline,
# then three rows of text should be combined into one.
# if (n < 6){
#   page[j:(j + 2)] %>%
#     paste(collapse = "") %>%
#     strsplit(split = "\\s+") -> linelist
#   linelist <- linelist[[1]]
#
# }
# Check if line contains student data by
# checking whether that flagged string is in
# any word in the list.
if (TRUE %in%  stri_detect_fixed(linelist, a0)) {
# Get name, presence, and date and save them to new_row
new_row <- c(get_name(linelist),
get_presence(linelist),
get_date(linelist))
# Add new_row to dataframe.
df[nrow(df)+1,] <- new_row
}
}
}
# Correct Student name capitalization.
df$Student <- str_to_title(df$Student)
# Set the date string as a Date object.
df$Date <- mdy(df$Date)
df$Date <- format(df$Date, format="%m-%d")
# Exclude holidays.
df %>% filter(Date != holiday) -> df
# Get number of class days.
class_days_n <- length(unique(df$Date))
# Correct Student name capitalization.
df$Student <- str_to_title(df$Student)
# Set the date string as a Date object.
df$Date <- mdy(df$Date)
df$Date <- format(df$Date, format="%m-%d")
# Exclude holidays.
df %>% filter(Date != holiday) -> df
# Get number of class days.
class_days_n <- length(unique(df$Date))
# Iterate over each page, over each line.
for (i in 1:length(raw_data)) {
page <- raw_data[[i]]
for (j in 1:length(page)) {
# line <- page[[j]]
line <- page[j]
# Strip each line into a list, and store its length.
linelist <- strsplit(line, "\\s+")[[1]]
n <- length(linelist)
# If the name field is so long that it forces a newline,
# then three rows of text should be combined into one.
# if (n < 6){
#   page[j:(j + 2)] %>%
#     paste(collapse = "") %>%
#     strsplit(split = "\\s+") -> linelist
#   linelist <- linelist[[1]]
#
# }
# Check if line contains student data by
# checking whether that flagged string is in
# any word in the list.
if (TRUE %in%  stri_detect_fixed(linelist, a0)) {
# Get name, presence, and date and save them to new_row
new_row <- c(get_name(linelist),
get_presence(linelist),
get_date(linelist))
# Add new_row to dataframe.
df[nrow(df)+1,] <- new_row
}
}
}
# Correct Student name capitalization.
df$Student <- str_to_title(df$Student)
# Set the date string as a Date object.
df$Date <- mdy(df$Date)
df$Date <- format(df$Date, format="%m-%d")
# Exclude holidays.
df %>% filter(Date != holiday) -> df
# Get number of class days.
class_days_n <- length(unique(df$Date))
df
tail(df)
# Group data by date and get total number of enrolled students each day.
df %>% group_by(Date) %>%
count(name = "Total") -> date_df
# Group data by date and count all who were in class any time that day.
df %>% group_by(Date) %>%
filter(
Presence == "Present" |
Presence == "Late" |
Presence == "Left Early"
) %>%
count(name = "In_Class") -> date_p_df
# Aggregate counts for In_Class, Total (Enrolled), and Percent.
date_df %>% add_column(In_Class = date_p_df$In_Class)  %>%
mutate(Percent = round(In_Class / Total * 100)) %>%
select(Date, In_Class, Total, Percent) -> date_df
date_df
date_p_df
View(date_df)
View(date_df)
View(date_p_df)
View(date_p_df)
library(pdftools)
library(magrittr)
library(lubridate)
library(tibble)
library(dplyr)
library(ggplot2)
library(here)
library(kableExtra)
library(tidyr)
library(stringr)
library(stringi)
# Set flag for identifying rows with desired data.
a0 <- "A00000"
# Set flag for holiday because CAMS is too stupid to exclude holidays from reports.
# MLK Day
holiday <- "2020-01-20"
# Initialize empty data frame.
df <- data.frame(Student=character(),
Presence=character(),
Date=character(),
stringsAsFactors=FALSE)
# Get raw attendance text, a list of lists.
pdf_text(here("Attendance Report.pdf")) %>% strsplit(split = "\n") -> raw_data
# Get header.
header <- raw_data[[1]][2]
# Function to extract name from a linelist of strings
get_name <- function(a_line_list){
student_name <- paste(a_line_list[3:2], collapse = " ")
student_name <- str_remove(student_name, ",") # Strip out the comma
return(student_name)
}
# Function to extract presence status from a linelist of strings
get_presence <- function(a_line_list){
suppressWarnings({
if (TRUE %in%  stri_detect_fixed(a_line_list, "Left")) {
return("Left Early")
} else if (TRUE %in%  stri_detect_fixed(a_line_list, "Present")) {
return("Present")
} else if (TRUE %in%  stri_detect_fixed(a_line_list, "Absent")) {
return("Absent")
} else if (TRUE %in%  stri_detect_fixed(a_line_list, "Late")) {
return("Late")
}
})
# return(student_presence)
}
get_date <- function(a_line_list){
suppressWarnings({
for (it in 1:length(a_line_list)){
if (!is.na(mdy(a_line_list[it]))){
return(a_line_list[it])
} else {
result <- NA
}
}
})
return(result)
}
# Iterate over each page, over each line.
for (i in 1:length(raw_data)) {
page <- raw_data[[i]]
for (j in 1:length(page)) {
# line <- page[[j]]
line <- page[j]
# Strip each line into a list, and store its length.
linelist <- strsplit(line, "\\s+")[[1]]
n <- length(linelist)
# If the name field is so long that it forces a newline,
# then three rows of text should be combined into one.
# if (n < 6){
#   page[j:(j + 2)] %>%
#     paste(collapse = "") %>%
#     strsplit(split = "\\s+") -> linelist
#   linelist <- linelist[[1]]
#
# }
# Check if line contains student data by
# checking whether that flagged string is in
# any word in the list.
if (TRUE %in%  stri_detect_fixed(linelist, a0)) {
# Get name, presence, and date and save them to new_row
new_row <- c(get_name(linelist),
get_presence(linelist),
get_date(linelist))
# Add new_row to dataframe.
df[nrow(df)+1,] <- new_row
}
}
}
# Correct Student name capitalization.
df$Student <- str_to_title(df$Student)
# Set the date string as a Date object.
df$Date <- mdy(df$Date)
df$Date <- format(df$Date, format="%m-%d")
# Exclude holidays.
df %>% filter(Date != holiday) -> df
# Get number of class days.
class_days_n <- length(unique(df$Date))
View(df)
View(df)
ymd("2020-01-02")
ymd("2020-01-02") %>% format(format="%m-%d")
rmarkdown::render("Attendance_Report_Refactored.Rmd", params = list(data = "lsd2.csv"))
rmarkdown::render("Attendance_Report_Refactored.Rmd", params = list(data = "lsd2.csv"))
rmarkdown::render("Attendance_Report_Refactored.Rmd", params = list(data = "Attendance Report.pdf"))
rmarkdown::render("Attendance_Report_Refactored.Rmd", params = list(data = "Attendance Report.pdf"))
rmarkdown::render("Attendance_Report_Refactored.Rmd", params = list(data = "Attendance Report.pdf"))
rmarkdown::render("Attendance_Report_Refactored.Rmd", params = list(data = "Attendance Report.pdf"))
rmarkdown::render("Attendance_Report_Refactored.Rmd", params = list(data = "Attendance Report.pdf"))
gregexpr([A-Z]{2}\d{3}, course_name)
gregexpr("[A-Z]{2}\d{3}", course_name)
gregexpr("[A-Z]{2}[0-9]{3}", course_name)
grep("[A-Z]{2}[0-9]{3}", course_name)
course_name
grep("[A-Z]{2}[0-9]{3}", course_name, value = TRUE)
str_extract("[A-Z]{2}[0-9]{3}", course_name, value = TRUE)
str_extract("[A-Z]{2}[0-9]{3}", course_name)
str_extract(course_name,"[A-Z]{2}[0-9]{3}")
rmarkdown::render("Attendance_Report_Refactored.Rmd", params = list(data = "Attendance Report.pdf"))
rmarkdown::render("Attendance_Report_Refactored.Rmd", params = list(data = "Attendance Report.pdf"))
rmarkdown::render("Attendance_Report_Refactored.Rmd", params = list(data = "Attendance Report.pdf"))
rmarkdown::render("Attendance_Report_Refactored.Rmd", params = list(data = "Attendance Report.pdf"))
rmarkdown::render("Attendance_Report_Refactored.Rmd", params = list(data = "Attendance Report.pdf"))
rmarkdown::render("Attendance_Report_Refactored.Rmd", params = list(data = "Attendance Report.pdf"))
rmarkdown::render("Attendance_Report_Refactored.Rmd", params = list(data = "Attendance Report.pdf"))
rmarkdown::render("Attendance_Report_Refactored.Rmd", params = list(data = "Attendance Report.pdf"))
rmarkdown::render("Attendance_Report_Refactored.Rmd", params = list(data = "Attendance Report.pdf"))
rmarkdown::render("Attendance_Report_Refactored.Rmd", params = list(data = "Attendance Report.pdf"))
rmarkdown::render("Attendance_Report_Refactored.Rmd", params = list(data = "Attendance Report.pdf"))
df
df %>% ggplot(aes(factor(Date), Percent)) + geom_line()
df %>% ggplot(aes(factor(Date), Percent)) + geom_line()
rmarkdown::render("Attendance_Report_Refactored.Rmd", params = list(data = "Attendance Report.pdf"))
rmarkdown::render("Attendance_Report_Refactored.Rmd", params = list(data = "Attendance Report.pdf"))
rmarkdown::render("Attendance_Report_Refactored.Rmd", params = list(data = "Attendance Report.pdf"))
rmarkdown::render("Attendance_Report_Refactored.Rmd", params = list(data = "Attendance Report.pdf"))
rmarkdown::render("Attendance_Report_Refactored.Rmd", params = list(data = "Attendance Report_MT155.pdf"))
rmarkdown::render("Attendance_Report_Refactored.Rmd", params = list(data = "Attendance Report_MT155.pdf"))
rmarkdown::render("Attendance_Report_Refactored.Rmd", params = list(data = "Attendance Report_MT155.pdf"))
rmarkdown::render("Attendance_Report_Refactored.Rmd", params = list(data = "Attendance Report_MT155.pdf"))
rmarkdown::render("Attendance_Report_Refactored.Rmd", params = list(data = "Attendance Report_MT155.pdf"))
rmarkdown::render("Attendance_Report_Refactored.Rmd", params = list(data = "Attendance Report_MT155.pdf"))
rmarkdown::render("Attendance_Report_Refactored.Rmd", params = list(data = "Attendance Report_MT155.pdf"))
rmarkdown::render("Attendance_Report_Refactored.Rmd", params = list(data = "Attendance Report_MT155.pdf"))
rmarkdown::render("Attendance_Report_Refactored.Rmd", params = list(data = "Attendance Report_MT155.pdf"))
rmarkdown::render("Attendance_Report_Refactored.Rmd", params = list(data = "Attendance Report_MT155.pdf"))
rmarkdown::render("Attendance_Report_Refactored.Rmd", params = list(data = "Attendance Report_MT155.pdf"))
rmarkdown::render("Attendance_Report_Refactored.Rmd", params = list(data = "Attendance Report_MT155.pdf"))
rmarkdown::render("Attendance_Report_Refactored.Rmd", params = list(data = "Attendance Report_MT155.pdf"))\
rmarkdown::render("Attendance_Report_Refactored.Rmd", params = list(data = "Attendance Report_MT155.pdf"))
rmarkdown::render("Attendance_Report_Refactored.Rmd", params = list(data = "Attendance Report_MT155.pdf"))
rmarkdown::render("Attendance_Report_Refactored.Rmd", params = list(data = "Attendance Report_MT155.pdf"))
rmarkdown::render("Attendance_Report_Refactored.Rmd", params = list(data = "Attendance Report_MT155.pdf"))
rmarkdown::render("Attendance_Report_Refactored.Rmd", params = list(data = "Attendance Report_MT155.pdf"))
rmarkdown::render("Attendance_Report_Refactored.Rmd", params = list(data = "Attendance Report_MT155.pdf"))
rmarkdown::render("Attendance_Report_Refactored.Rmd", params = list(data = "Attendance Report_MT155.pdf"))
rmarkdown::render("Attendance_Report_Refactored.Rmd", params = list(data = "Attendance Report_MT155.pdf"))
rmarkdown::render("Attendance_Report_Refactored.Rmd", params = list(data = "Attendance Report_MT155.pdf"))
rmarkdown::render("Attendance_Report_Refactored.Rmd", params = list(data = "Attendance Report_MT155.pdf"))
rmarkdown::render("Attendance_Report_Refactored.Rmd", params = list(data = "Attendance Report_MT155.pdf"))
rmarkdown::render("Attendance_Report_Refactored.Rmd", params = list(data = "Attendance Report_MT155.pdf"))
rmarkdown::render("Attendance_Report_Refactored.Rmd", params = list(data = "Attendance Report_MT155.pdf"))
rmarkdown::render("Attendance_Report_Refactored.Rmd", params = list(data = "Attendance Report_MT155.pdf"))
rmarkdown::render("Attendance_Report_Refactored.Rmd", params = list(data = "Attendance Report_MT155.pdf"))
legend <- data.frame(x = c("Pr", "Ab"), y =c("Present", "Absent"))
legend
df$Presence %>% unique()
rmarkdown::render("Attendance_Report_Refactored.Rmd",
params = list(input_file = "Attendance Report_MT155.pdf"),
output_file = paste(input_file,".pdf")
)
rmarkdown::render("Attendance_Report.Rmd",
params = list(input_file = "Attendance Report_MT155.pdf"),
output_file = paste(input_file,".pdf")
)
rmarkdown::render("Attendance_Report.Rmd",
params = list(input_file = file_to_input),
output_file = paste(file_to_input,".pdf")
)
file_to_input = "Attendance Report_MT155.pdf"
rmarkdown::render("Attendance_Report.Rmd",
params = list(input_file = file_to_input),
output_file = paste(file_to_input,".pdf")
)
rmarkdown::render("Attendance_Report.Rmd",
params = list(input_file = file_to_input),
output_file = paste(file_to_input,"_summary")
)
rmarkdown::render("Attendance_Report.Rmd",
params = list(input_file = file_to_input),
output_file = paste(file_to_input,"_summary")
)
rmarkdown::render("Attendance_Report.Rmd", clean = FALSE)
# output_file = paste(file_to_input,"_summary")
rmarkdown::render("Attendance_Report.Rmd",
params = list(input_file = file_to_input),
# output_file = paste(file_to_input,"_summary")
)
rmarkdown::render("Attendance_Report.Rmd",
params = list(input_file = file_to_input),
# output_file = paste(file_to_input,"_summary")
)
rmarkdown::render("Attendance_Report.Rmd",
params = list(input_file = file_to_input),
# output_file = paste(file_to_input,"_summary")
)
rmarkdown::render("Attendance_Report.Rmd",
params = list(input_file = file_to_input),
output_file = paste(file_to_input,"_summary")
)
rmarkdown::render("Attendance_Report.Rmd",
params = list(input_file = file_to_input),
output_file = paste(file_to_input,"_summary", sep = "")
)
list.files()
list.files("input/")
for (item in list.files("input/")) {
rmarkdown::render("Attendance_Report.Rmd",
params = list(input_file = item),
output_file = paste("output/", file_to_input,"_summary", sep = "")
)
}
for (item in list.files("input/")) {
rmarkdown::render("Attendance_Report.Rmd",
params = list(input_file = paste("input/", item, sep = "")),
output_file = paste("output/", file_to_input,"_summary", sep = "")
)
}
for (item in list.files("input/")) {
rmarkdown::render("Attendance_Report.Rmd",
params = list(input_file = paste("input/", item, sep = "")),
output_file = paste("output/", item,"_summary", sep = "")
)
}
for (item in list.files("input/")) {
rmarkdown::render("Attendance_Report.Rmd",
params = list(input_file = paste("input/", item, sep = "")),
output_file = paste("output/", item,"_summary", sep = "")
)
}
current_df
install.packages(c("plotly", "shinythemes"))
shiny::runApp('~/Code/EWU/attendance-dashboard')
runApp('~/Code/EWU/attendance-dashboard')
View(current_df)
View(current_df)
View(current_df)
View(date_df)
View(student_date_df)
View(student_df)
View(current_df)
runApp('~/Code/EWU/attendance-dashboard')
runApp('~/Code/EWU/attendance-dashboard')
runApp('~/Code/EWU/attendance-dashboard')
setwd()
setwd("../attendance-dashboard/")
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?file.copy
